blueprint:
  name: Humidity & Temp Cool-to-Dry Climate Control
  description: >
    # ❄️Humidity & Temp Cool-to-Dry
    
    **Version: 1.2**

    Automatically triggers a cool-to-dry cycle if humidity or temperature exceed thresholds.  
    The cycle adjusts HVAC settings and restores previous values when done.  
    You can customize temperature, fan, and HVAC mode for the cycle, as well as restrict how frequently it can repeat.
    
    <details>
    <summary><b>Version Changelog</b></summary>
    
    
    
     - **1.0** Initial version  
     - **1.1** Fixed race condition: prevent restarting AC if already on; start AC/HVAC mode before setting temperature and fan
     - **1.2** Add delays between climate operations to prevent race conditions

    </details>



    **\* Required parameters.**
  domain: automation

  input:
    climate:
      name: Climate *
      icon: mdi:thermostat
      collapsed: false
      input:
        climate_entity:
          name: Climate Entity
          description: The climate entity to control and read temperature/humidity from
          selector:
            entity:
              domain: climate

    sensors:
      name: Sensors
      icon: mdi:eye
      collapsed: true
      input:
        temperature_sensors:
          name: Additional Temperature Sensors
          description: Optional list of extra temperature sensors
          default: [ ]
          selector:
            entity:
              domain: sensor
              device_class: temperature
              multiple: true
        humidity_sensors:
          name: Additional Humidity Sensors
          description: Optional list of extra humidity sensors
          default: [ ]
          selector:
            entity:
              domain: sensor
              device_class: humidity
              multiple: true

    thresholds:
      name: Thresholds *
      icon: mdi:chart-line
      collapsed: true
      input:
        temperature_threshold:
          name: Temperature Threshold (°C)
          description: Temperature above which to activate automation
          default: 28
          selector:
            number:
              min: 20
              max: 35
              unit_of_measurement: "°C"
        humidity_threshold:
          name: Humidity Threshold (%)
          description: Humidity above which to activate automation
          default: 65
          selector:
            number:
              min: 30
              max: 100
              unit_of_measurement: "%"

    targets:
      name: Targets *
      icon: mdi:target
      collapsed: true
      input:
        target_temperature:
          name: Target Temperature (°C) *
          description: Target temperature to set during this dry cycle
          default: 23
          selector:
            number:
              min: 16
              max: 30
              unit_of_measurement: "°C"
        fan_mode:
          name: Target Fan Mode
          description: Fan mode to set during this dry cycle. Set to none to skip.
          default: none
          selector:
            select:
              options:
                - auto
                - low
                - medium
                - high
                - none
        hvac_mode:
          name: Target HVAC Mode
          description: Optional HVAC mode to set during this dry cycle. Set to none to skip.
          default: "none"
          selector:
            select:
              options:
                - cool
                - dry
                - fan_only
                - none

    cycle_timing:
      name: Cycle Timing *
      icon: mdi:timer-sand
      collapsed: true
      input:
        run_duration:
          name: Run Duration *
          description: How long to keep this dry cycle once triggered
          default:
            hours: 0
            minutes: 30
            seconds: 0
          selector:
            duration:
        dry_cycle_interval:
          name: Cool-to-Dry Cycle Minimum Interval *
          description: Minimum time to wait after the last dry cycle before running another
          default:
            hours: 2
            minutes: 0
            seconds: 0
          selector:
            duration:
        operation_delay:
          name: Operation Delay (seconds)
          description: Delay between successive climate operations
          default: 1
          selector:
            number:
              min: 1
              max: 30
              unit_of_measurement: "s"

mode: single

trigger:
  - platform: state
    entity_id: !input climate_entity
  - platform: state
    entity_id: !input temperature_sensors
  - platform: state
    entity_id: !input humidity_sensors

variables:
  dry_cycle_interval: !input dry_cycle_interval
  temperature_threshold: !input temperature_threshold
  temperature_sensors: !input temperature_sensors
  humidity_sensors: !input humidity_sensors
  humidity_threshold: !input humidity_threshold
  operation_delay: !input operation_delay

condition:
  # 1) Only proceed if at least dry_cycle_interval minutes have passed since last_run_datetime
  - condition: template
    value_template: >
      {% set last = this.attributes.last_triggered %}
      {% if last is none %}
        true
      {% else %}
        {{ (now() - last) > timedelta(**dry_cycle_interval) }}
      {% endif %}

  # 2) Either humidity or temperature above the threshold
  - condition: or
    conditions:
      - condition: numeric_state
        entity_id: !input climate_entity
        attribute: current_humidity
        above: !input humidity_threshold
      - condition: numeric_state
        entity_id: !input climate_entity
        attribute: current_temperature
        above: !input temperature_threshold
      - condition: template
        value_template: >-
          {{ expand(temperature_sensors)
              | map(attribute='state')
              | map('float')
              | select('gt', temperature_threshold)
              | list
              | count > 0 }}
      - condition: template
        value_template: >-
          {{ expand(humidity_sensors)
              | map(attribute='state')
              | map('float')
              | select('gt', humidity_threshold)
              | list
              | count > 0 }}

action:

  # 1) Save the previous state for restoration
  - variables:
      climate_entity: !input climate_entity
      previous_temp: "{{ state_attr(climate_entity, 'temperature') }}"
      previous_fan: "{{ state_attr(climate_entity, 'fan_mode') }}"
      previous_mode: "{{ states(climate_entity) }}"
      hvac_mode: !input hvac_mode
      fan_mode: !input fan_mode
      ac_was_off: "{{ is_state(climate_entity, 'off') }}"

  # 2) Apply the settings
  # Set the target HVAC mode if needed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ hvac_mode != 'none' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "{{ hvac_mode }}"

    # Otherwise, put ON if it was OFF
    default:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ ac_was_off }}"
            sequence:
              - service: climate.turn_on
                target:
                  entity_id: !input climate_entity

  - delay:
      seconds: !input operation_delay

  # Set the target temperature
  - service: climate.set_temperature
    target:
      entity_id: !input climate_entity
    data:
      temperature: !input target_temperature

  # Set the target FAN mode if needed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ fan_mode != 'none' }}"
        sequence:
          - delay:
              seconds: !input operation_delay
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entity
            data:
              fan_mode: "{{ fan_mode }}"

  # 3) Let it run
  - delay: !input run_duration

  # 4) Restore original settings
  # Restore the HVAC mode if needed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ hvac_mode != 'none' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "{{ previous_mode }}"
          - delay:
              seconds: !input operation_delay

  # Restore the temperature
  - service: climate.set_temperature
    target:
      entity_id: !input climate_entity
    data:
      temperature: "{{ previous_temp }}"

  # Restore the FAN if needed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ fan_mode != 'none' }}"
        sequence:
          - delay:
              seconds: !input operation_delay
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entity
            data:
              fan_mode: "{{ previous_fan }}"

  # Put back OFF is needed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ ac_was_off }}"
        sequence:
          - delay:
              seconds: !input operation_delay
          - service: climate.turn_off
            target:
              entity_id: !input climate_entity

  # 4) Optional notify if humidity still high
  - choose:
      - conditions:
          - condition: numeric_state
            entity_id: !input climate_entity
            attribute: current_humidity
            above: !input humidity_threshold
        sequence:
          - service: notify.notify
            data:
              message: "Humidity is still high after Cool To Dry cycle."
