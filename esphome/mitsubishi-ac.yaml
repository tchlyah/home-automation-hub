substitutions:
  name: couloir
  friendly_name: Couloir
  remote_temp_sensor: sensor.chambres_temperature

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp8266:
  board: d1_mini

# Récupération du code externe
external_components:
  - source: github://echavet/MitsubishiCN105ESPHome

# UART CN105
uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: 1
  rx_pin: 3

# Climate CN105
climate:
  - platform: cn105
    name: AC
    id: ac
    update_interval: 1s
    visual:
      min_temperature: 19
      max_temperature: 30
    supports:
      mode: [COOL, FAN_ONLY, DRY]
      fan_mode: [AUTO, LOW, MEDIUM, HIGH]
      swing_mode: []



# Enable Web server
web_server:
  port: 80

# Sensors with general information.
sensor:
  # Uptime workaround (ESPHome 2025.2.0)
  - platform: uptime
    name: Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 120s

  # Remote Temperature Sensor
  - platform: homeassistant
    name: "Remote Temperature Sensor"
    entity_id: ${remote_temp_sensor} # Replace with your HomeAssistant remote sensor entity id, or include in substitutions
    internal: false
    disabled_by_default: true
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "°C"
    filters:
      # Uncomment the lambda line to convert F to C on incoming temperature
      #  - lambda: return (x - 32) * (5.0/9.0);
      - clamp: # Limits values to range accepted by Mitsubishi units
          min_value: 1
          max_value: 40
          ignore_out_of_range: true
      - throttle: 30s
    on_value:
      then:
        - logger.log:
            level: INFO
            format: "Remote temperature received from HA: %.1f C"
            args: ["x"]
        - lambda: "id(ac).set_remote_temperature(x);"

# Enable logging
logger:
  hardware_uart: UART1
  level: INFO
  logs:
    EVT_SETS : INFO
    WIFI : INFO
    MQTT : INFO
    WRITE_SETTINGS : INFO
    SETTINGS : INFO
    STATUS : INFO
    CN105Climate: WARN
    CN105: INFO
    climate: WARN
    sensor: WARN
    chkSum : INFO
    WRITE : WARN
    READ : WARN
    Header: INFO
    Decoder : INFO
    CONTROL_WANTED_SETTINGS: INFO

# Home Assistant
api:
  encryption:
    key: !secret api_key

# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Create a button to restart the unit from HomeAssistant. Rarely needed, but can be handy.
button:
  - platform: restart
    name: "Restart AC"

ota:
  - platform: esphome
    password: !secret ota_pwd

wifi:
  # use_address: 192.168.1.135
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ota_pwd
