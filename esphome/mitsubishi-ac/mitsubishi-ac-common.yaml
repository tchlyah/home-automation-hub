esphome:
  name: ${name}
  friendly_name: ${friendly_name}

# Récupération du code externe
external_components:
  - source: github://echavet/MitsubishiCN105ESPHome
    refresh: always

# Globals & utilities
globals:
  # current Wi-Fi state (kept by the on_connect/on_disconnect triggers)
  - id: wifi_ok
    type: bool
    restore_value: no
    initial_value: 'false'

# Climate CN105
climate:
  - platform: cn105
    name: AC
    id: ac
    update_interval: 1s
    remote_temperature_timeout: 30min
    visual:
      min_temperature: 19
      max_temperature: 30
    supports:
      mode: [ COOL, FAN_ONLY, DRY ]
      fan_mode: [ AUTO, LOW, MEDIUM, HIGH ]
      swing_mode: [ ]

# Enable Web server
web_server:
  port: 80

# Diagnostic sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP
      icon: mdi:ip
    ssid:
      name: SSID
      icon: mdi:wifi

  - platform: version
    name: Version
    hide_timestamp: true
    disabled_by_default: false
    icon: mdi:new-box
    entity_category: diagnostic


# Sensors with general information.
binary_sensor:
  - platform: template
    id: ac_connected
    name: "CN105 Connected"
    entity_category: diagnostic
    lambda: |-
      return (bool) id(ac).isHeatpumpConnectionActive();
sensor:
  # Reports the Uptime in days
  - platform: uptime
    name: "Uptime"
    unit_of_measurement: days
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574
    device_class: duration
    state_class: total_increasing
    entity_category: diagnostic

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 120s

  # Remote Temperature Sensor
  - platform: homeassistant
    name: "Remote Temperature Sensor"
    entity_id: ${remote_temp_sensor} # Replace with your HomeAssistant remote sensor entity id, or include in substitutions
    internal: false
    disabled_by_default: true
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "°C"
    filters:
      # Uncomment the lambda line to convert F to C on incoming temperature
      #  - lambda: return (x - 32) * (5.0/9.0);
      - clamp: # Limits values to range accepted by Mitsubishi units
          min_value: 1
          max_value: 40
          ignore_out_of_range: true
      - throttle: 30s
    on_value:
      then:
        - logger.log:
            level: INFO
            format: "Remote temperature received from HA: %.1f C"
            args: [ "x" ]
        - lambda: "id(ac).set_remote_temperature(x);"

# Enable logging
logger:
  hardware_uart: UART1
  level: INFO
  logs:
    EVT_SETS: INFO
    WIFI: INFO
    MQTT: INFO
    WRITE_SETTINGS: INFO
    SETTINGS: INFO
    STATUS: INFO
    CN105Climate: WARN
    CN105: INFO
    climate: WARN
    sensor: WARN
    chkSum: INFO
    WRITE: WARN
    READ: WARN
    Header: INFO
    Decoder: INFO
    CONTROL_WANTED_SETTINGS: INFO
    CYCLE: WARN

# Home Assistant
api:
  encryption:
    key: !secret api_key
  services:
    - service: set_remote_temperature
      variables:
        temperature: float
      then:
        - logger.log:
            level: INFO
            format: "Remote temperature received from HA: %.1f C"
            args: [ "temperature" ]
        - lambda: "id(ac).set_remote_temperature(temperature);"
    - service: use_internal_temperature
      then:
        - lambda: "id(ac).set_remote_temperature(0);"

# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Create a button to restart the unit from HomeAssistant. Rarely needed, but can be handy.
button:
  - platform: restart
    name: "Restart AC"

ota:
  - platform: esphome
    password: !secret ota_pwd

wifi:
  #  use_address: ${ip_address}
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ota_pwd

## Captive portal when wifi connection fails
captive_portal:
